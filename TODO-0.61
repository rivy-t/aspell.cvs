THINGS I AM WORKING ON:

1) 
Be able to store the same base word multiple times which makes sense
when cross products are involved. [DONE]

2)
Create a generic filter to handle multi-character letters such as "a
or \"a for ä. This filter should make use of the already exiting
normalization code if possible. Also:

  Allow language specific multi-character conversions.

  Allow the encoding option to use the generic multi-character
  conversions when it makes sense.

This will effectively allow Aspell to handle multi-character letters as
well as Ispell which is the one major area Ispell is currently better
than Aspell.

ALMOST DONE: Still a few rough spots, especially with Ispell compatibly.
  - "ascii" can not be used as a name for a language specific encoding
  - the "+" command in pipe mode also changes the multi-character
    conversion layer, in Ispell it ONLY changes the filter
  - The multi-character conversion lawyer is not selected based on the file
    name extension as in Ispell
Also need to update the manual to reflect the changes.

3)
Rewrite the document checker interface to correctly handle the case
when the replacement is more than one word. [DONE]

4) 
Create a special pipe mode that ignores special characters at the
beginning of a line so that a user can feed it a text file as is.

THINKS OTHERS ARE WORKING ON:

1) 
Expand prezip-bin to also support compressing in the
same format that "word-list-compress" so that the word-list-compress
program can be removed and replaced with a link to prezip-bin (or if
really necessary a shell script). [Jose Da Silva] [DONE, I think]

2) 
Possible improve writable.cpp to make it easier to understand and
add additional features. [Gary Setter] [DONE]

OTHER WELL DEFINED TASKS:

1) 
Modify the scoring algo to give higher scores to typos, see the TODO
at the top of suggest.cpp

2) 
Add an incremental mode to munch-list, see the TODO at the top of
lib/munch-list.cpp


OTHER POSSIBILITIES:

1) Develop a more powerful C API for Aspell. Ideally this API should
allow one to perform all the tasks the Aspell utility can do. This
included the ability to check whole documents, and create
dictionaries, among other things.  Also add a suggestion mode which
makes it possible to retrieve the score of the suggestion amount other
information.

2)
Develop a GUI interface for Aspell.  It will probably be very similar
to the old Gaspell.

